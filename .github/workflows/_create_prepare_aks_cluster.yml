name: Create and Prepare AKS Cluster

on:
  workflow_call:
    inputs:
      kubernetes-version: 
        required: true
        type: string
        description: "Kubernetes version to use for AKS cluster creation"
    outputs:
      cluster-name:
        description: AKS Cluster Name With Randomly Generated Suffix
        value: ${{ jobs.create-prepare-aks-cluster.outputs.cluster-name }}
  workflow_dispatch:
    inputs:
      kubernetes-version:
        required: true
        type: string
        description: "Kubernetes version to use for AKS cluster creation"
    
jobs:
  create-prepare-aks-cluster:
    name: Create and Prepare Test AKS Cluster
    runs-on: ubuntu-latest
    env: 
      RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }} 
      USER_ASSIGNED_IDENTITY_NAME: ${{ vars.USER_ASSIGNED_IDENTITY_NAME }}
    outputs:
      cluster-name: ${{ steps.create-aks-cluster.outputs.cluster-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Workflow ID
        id: generate-id
        run: echo "id=$(openssl rand -hex 8 | tr -d '\n')" >> $GITHUB_OUTPUT
      
      - name: Log into Azure
        run: |
          az login --service-principal \
          --username ${{ secrets.AZURE_SERVICE_PRINCIPAL_APP_ID }} \
          --password ${{ secrets.AZURE_SERVICE_PRINCIPAL_PASSWORD }} \
          --tenant ${{ secrets.AZURE_SERVICE_PRINCIPAL_TENANT }}

      - name: Install Dependencies 
        id: install-dependencies 
        run: |
          result=$(az extension list -o table  2>&1 || true)
          if [[ $result == *"aks-preview"* ]]; then
            echo "aks-preview already installed, upgrading aks-preview version."
            az extension update --name aks-preview
          else
            echo "aks-preview extension not found. Installing aks-preview..."
            az extension add --name aks-preview
          fi

          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin
          kubectl version 2>&1 || true

      - name: Create AKS Cluster
        id: create-aks-cluster
        if: steps.install-dependencies.outcome == 'success'
        env: 
          RUN_ID: ${{ steps.generate-id.outputs.id}}
        run: |
          az aks create --resource-group ${{ vars.RESOURCE_GROUP }} \
          --name skr-kafka-demo-${RUN_ID} \
          --kubernetes-version ${{ inputs.kubernetes-version }} \
          --os-sku AzureLinux \
          --node-vm-size Standard_DC4as_cc_v5 \
          --tags --tags "Owner=accct" \
          --enable-oidc-issuer \
          --enable-workload-identity \
          --workload-runtime KataCcIsolation \
          --node-count 1 \
          --generate-ssh-keys
          echo "cluster-name=skr-kafka-demo-${RUN_ID}" >> $GITHUB_OUTPUT

      - name: Setup Workload Identity
        id: setup-workload-identity
        if: steps.create-aks-cluster.outcome == 'success'
        env:
          CLUSTER_NAME: ${{ steps.create-aks-cluster.outputs.cluster-name}}
        run: |
          az aks get-credentials --name $CLUSTER_NAME --resource-group $RESOURCE_GROUP  --overwrite-existing
          export AKS_OIDC_ISSUER="$(az aks show -n $CLUSTER_NAME -g $RESOURCE_GROUP --query "oidcIssuerProfile.issuerUrl" -otsv)"
          echo "Setting AKS_OIDC_ISSUER to $AKS_OIDC_ISSUER"

          export USER_ASSIGNED_CLIENT_ID="$(az identity show --resource-group $RESOURCE_GROUP --name $USER_ASSIGNED_IDENTITY_NAME --query 'clientId' -otsv)"
          echo "Setting USER_ASSIGNED_CLIENT_ID to $USER_ASSIGNED_CLIENT_ID"

          result=$(kubectl get namespace kafka 2>&1 || true)
          if [[ $result == *"not found"* ]]; then
              echo "kafka namespace not found. Create kafka namespace..."
              kubectl create namespace kafka
          else
              echo "kafka namespace already exists."
          fi

          kubectl delete sa -n kafka workload-identity-sa 2>&1 || true
          cat <<EOF | kubectl apply -f - 
          apiVersion: v1 
          kind: ServiceAccount 
          metadata: 
            annotations: 
              azure.workload.identity/client-id: ${USER_ASSIGNED_CLIENT_ID}
            name: workload-identity-sa 
            namespace: kafka 
          EOF

          result=$(az identity federated-credential show --name myFedIdentity --identity-name $USER_ASSIGNED_IDENTITY_NAME --resource-group $RESOURCE_GROUP 2>&1 || true)
          if [[ $result == *$AKS_OIDC_ISSUER* ]]; then
              echo "Federated identity already exists"
          else
              echo "Federated identity not found. Creating... "
              az identity federated-credential create --name myFedIdentity --identity-name $USER_ASSIGNED_IDENTITY_NAME --resource-group $RESOURCE_GROUP --issuer ${AKS_OIDC_ISSUER} --subject system:serviceaccount:kafka:workload-identity-sa
          fi

          kubectl create -f 'https://strimzi.io/install/latest?namespace=kafka' -n kafka 2>&1 || true 
          # Apply the `Kafka` Cluster CR file
          kubectl apply -f https://strimzi.io/examples/latest/kafka/kafka-persistent-single.yaml -n kafka 2>&1 || true 

          echo "Sleep for 3 minute and wait for Kafka cluster to be created and fully working..."
          sleep 180