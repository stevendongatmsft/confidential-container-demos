name: Cleanup

on:
  workflow_call:
  schedule:
    - cron: "0 0 * * *"

jobs:
  remove-workload-and-cluster:
    name: Clean Up
    runs-on: ubuntu-latest
    steps:

      - name: Log into Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_SERVICE_PRINCIPAL_APP_ID }} \
            --password ${{ secrets.AZURE_SERVICE_PRINCIPAL_PASSWORD }} \
            --tenant ${{ secrets.AZURE_SERVICE_PRINCIPAL_TENANT }}

      - name: Clean Up
        id: cleanup
        env: 
          RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
        run: | 
          result=$(az aks list -g $RESOURCE_GROUP --query "[].name" -otsv)
          sleep 30 
          max_retries=5
          retries=0
          for name in $result 
          do
            while [ $retries -lt $max_retries ]; do
                echo "Querying for cluster state"
                result=$(az aks show -g conf-container-examples $name --query 'provisioningState' -otsv) 
                # Checking cluster state to be succeeded before initiating delete operation
                # Deleting a cluster in provisioning state results in CLI command error and dangling cluster 
                if [[ $result == *"Succeeded"* ]]; then
                    echo "Returned result is $result"
                    echo "Cluster is ready to be deleted."
                    az aks stop --resource-group $RESOURCE_GROUP --name $name 2>&1
                    az aks delete --resource-group $RESOURCE_GROUP --name $name --no-wait --yes
                    break  # Exit the loop on successful attempt
                elif [[ $result == *"Stopped"* ]]; then
                    az aks delete --resource-group $RESOURCE_GROUP --name $name --no-wait --yes
                    break  # Exit the loop on successful attempt
                else
                    echo "Returned cluster provisioning state is $result"
                    echo "Retrying in 3 minutes..."
                    retries=$((retries+1))
                    sleep 180
                fi
            done
          done

          if [ $retries -eq $max_retries ]; then
            echo "The operation has been tried 5 times without success."
            exit 1
          fi