name: Kafka Demo Test 

on:
  pull_request:
    branches: 
      - main
  workflow_call:
    inputs:
      sidecar-registry:
        description: "The registry to get the image from"
        required: true
        default: "mcr.microsoft.com"
        type: string
      key-release-image:
        description: "The image of the SKR sidecar to use"
        required: true
        default: "aci/skr:2.7"
        type: string
      consumer-image: 
        description: "Consumer Image"
        required: true
        type: string
      producer-image: 
        description: "Producer Image"
        required: true
        type: string
      skr-kafka-demo-topic:
        description: "Kafka topic"
        required: true
        default: "kafka-demo-topic"
        type: string  
  workflow_dispatch:
    inputs:
      sidecar-registry:
        description: "The registry to get the image from"
        required: true
        type: choice
        default: mcr.microsoft.com
        options: 
          - mcr.microsoft.com
          - confidentialsidecars.azurecr.io
      key-release-image:
        description: "The image of the SKR sidecar to use"
        required: true
        default: "aci/skr:2.7"
        type: string
      consumer-image: 
        description: "Consumer Image"
        default: acc/samples/kafka/consumer:1.0
        required: true
        type: string
      producer-image: 
        description: "Producer Image"
        default: acc/samples/kafka/producer:1.0
        required: true
        type: string
  merge_group:
    branches:
      - main

jobs:
  build-image:
    name: Build Image 
    runs-on: ubuntu-latest
    if: ${{ inputs.consumer-image }} == '' || ${{ inputs.producer-image }} == ''
    outputs:
      consumer-image: ${{ steps.build-image.outputs.consumer-image }}
      producer-image: ${{ steps.build-image.outputs.producer-image }}
    steps: 
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: main

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_REGISTRY_URLL }}
          username: ${{ secrets.AZURE_REGISTRY_USERNAMEE }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORDD }}

      - name: Build image 
        id: build-image
        run: | 
          cd main/kafka/consumer
          consumer_image=""
          producer_image=""
          if [[ "${{ inputs.consumer-image }}" == "" ]]; then
            docker build -t fishersnpregistry.azurecr.io/kafka-pipeline/consumer:${{github.sha}} -f Dockerfile . 
            docker push fishersnpregistry.azurecr.io/kafka-pipeline/consumer:${{github.sha}}
            consumer_image=fishersnpregistry.azurecr.io/kafka-pipeline/consumer:${{github.sha}}
          fi 
          
          if [[ "${{ inputs.producer-image }}" == "" ]]; then
            docker build -t fishersnpregistry.azurecr.io/kafka-pipeline/producer:${{github.sha}} -f Dockerfile . 
            docker push fishersnpregistry.azurecr.io/kafka-pipeline/producer:${{github.sha}}
            producer_image=fishersnpregistry.azurecr.io/kafka-pipeline/producer:${{github.sha}}
          fi

          echo "consumer_image is set to $consumer_image"
          echo "producer_image is set to $producer_image"

          echo "consumer-image=$consumer_image" >> $GITHUB_OUTPUT
          echo "producer-image=$producer_image" >> $GITHUB_OUTPUT

  prepare:
    name: Extract Environment Variables
    runs-on: ubuntu-latest
    needs: [build-image]
    outputs:
      key-release-image: ${{ steps.extract-envs.outputs.key-release-image }}
      consumer-image: ${{ steps.extract-envs.outputs.consumer-image }}
      producer-image: ${{ steps.extract-envs.outputs.producer-image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Extract Envs 
        id: extract-envs
        run: | 
          echo "Extracting Environment Variables"
          echo "Triggering event is ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "key-release-image=mcr.microsoft.com/aci/skr:2.7" >> $GITHUB_OUTPUT
            echo "consumer-image=${{ needs.build-image.outputs.consumer-image }}" >> $GITHUB_OUTPUT
            echo "producer-image=${{ needs.build-image.outputs.producer-image }}" >> $GITHUB_OUTPUT
          else
            echo "key-release-image=${{ format('{0}/{1}', inputs.sidecar-registry, inputs.key-release-image) }}" >> $GITHUB_OUTPUT
            
            if [ -z "${{ inputs.consumer-image }}" ]; then
              echo "consumer-image=${{ needs.build-image.outputs.consumer-image }}" >> $GITHUB_OUTPUT
            else
              echo "consumer-image=${{ format('{0}/{1}', inputs.sidecar-registry, inputs.consumer-image) }}" >> $GITHUB_OUTPUT
            fi

            if [ -z "${{ inputs.producer-image }}" ]; then
              echo "producer-image=${{ needs.build-image.outputs.producer-image }}" >> $GITHUB_OUTPUT
            else
              echo "producer-image=${{ format('{0}/{1}', inputs.sidecar-registry, inputs.producer-image) }}" >> $GITHUB_OUTPUT
            fi
          fi
          echo "1 ${{ needs.build-image.outputs.consumer-image }}"
          echo "2 ${{ needs.build-image.outputs.producer-image }}"

  # create-prepare-aks-cluster:
  #   name: Create AKS Cluster
  #   needs: [build-image, prepare]
  #   uses: ./.github/workflows/_create_prepare_aks_cluster.yml
  #   secrets: inherit
 
  # deploy-kafka-test: 
  #   name: Deploy Kafka Demo Test 
  #   uses: ./.github/workflows/_deploy_kafka_test.yml
  #   needs: [build-image, prepare, create-prepare-aks-cluster]
  #   secrets: inherit 
  #   with: 
  #     cluster-name: ${{ needs.create-prepare-aks-cluster.outputs.cluster-name }}
  #     key-release-image: ${{ needs.prepare.outputs.key-release-image }}
  #     consumer-image: ${{ needs.prepare.outputs.consumer-image }}
  #     producer-image: ${{ needs.prepare.outputs.producer-image }}

  # test-workload: 
  #   name: Test Workload 
  #   uses: ./.github/workflows/_test_workload.yml
  #   needs: [build-image, prepare, create-prepare-aks-cluster, deploy-kafka-test]
  #   secrets: inherit 
  #   with: 
  #     cluster-name: ${{ needs.create-prepare-aks-cluster.outputs.cluster-name }}

  # cleanup: 
  #   name: Clean Up
  #   if: always()
  #   uses: ./.github/workflows/_cleanup.yml
  #   needs: [build-image, prepare, create-prepare-aks-cluster, deploy-kafka-test, test-workload]
  #   secrets: inherit

  

